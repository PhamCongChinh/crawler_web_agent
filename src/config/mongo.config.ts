import mongoose from "mongoose";
import { envConfig } from "../config/env.config.js";

export class MongoConnection {
  private static instance: MongoConnection;
  private isConnected = false;
  private retryCount = 0;
  private readonly maxRetries = 5;
  private readonly retryDelay = 3000; // ms

  private constructor() {}

  public static getInstance(): MongoConnection {
    if (!MongoConnection.instance) {
      MongoConnection.instance = new MongoConnection();
    }
    return MongoConnection.instance;
  }

  public async connect(): Promise<typeof mongoose> {
    if (this.isConnected) {
      console.log("‚úÖ MongoDB ƒë√£ k·∫øt n·ªëi r·ªìi.");
      return mongoose;
    }

    const uri = envConfig.MONGO_URI;
    const dbName = envConfig.MONGO_DB_NAME;

    while (this.retryCount < this.maxRetries) {
      try {
        console.log(`üîå ƒêang k·∫øt n·ªëi MongoDB (l·∫ßn ${this.retryCount + 1})...`);
        await mongoose.connect(uri, { dbName });
        this.isConnected = true;
        console.log(`‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng: ${dbName}`);
        return mongoose;
      } catch (err) {
        this.retryCount++;
        console.error(`‚ùå L·ªói k·∫øt n·ªëi MongoDB: ${err}`);
        if (this.retryCount < this.maxRetries) {
          console.log(`üîÅ Th·ª≠ l·∫°i sau ${this.retryDelay / 1000}s...`);
          await new Promise((resolve) => setTimeout(resolve, this.retryDelay));
        } else {
          throw new Error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB sau nhi·ªÅu l·∫ßn th·ª≠.");
        }
      }
    }

    throw new Error("‚ùå K·∫øt n·ªëi MongoDB th·∫•t b·∫°i.");
  }

  public async disconnect(): Promise<void> {
    if (this.isConnected) {
      await mongoose.disconnect();
      this.isConnected = false;
      console.log("üîå Ng·∫Øt k·∫øt n·ªëi MongoDB.");
    }
  }
}
